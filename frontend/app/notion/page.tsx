import Link from "next/link";
import { NotionPage } from "@/types";
import AddPageForm from "./AddPageForm";
import PageRow from "./PageRow";

const API_URL = process.env.API_URL || process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";

async function getNotionPages() {
  try {
    const res = await fetch(`${API_URL}/api/notion-pages`, {
      cache: "no-store",
      next: { revalidate: 0 },
    });

    if (!res.ok) {
      throw new Error("Failed to fetch notion pages");
    }

    return await res.json();
  } catch (error) {
    console.error("Error fetching notion pages:", error);
    return [];
  }
}

export default async function NotionPagesPage() {
  const pages: NotionPage[] = await getNotionPages();

  const syncedPages = pages.filter((p) => p.status === "synced").length;
  const pendingPages = pages.filter((p) => p.status === "pending").length;
  const errorPages = pages.filter((p) => p.status === "error").length;

  return (
    <div>
      <header className="header">
        <div className="container" style={{ position: "relative" }}>
          <h1>ü§ñ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Notion TG</h1>
          <nav className="nav">
            <Link href="/" className="nav-link">
              –ì–ª–∞–≤–Ω–∞—è
            </Link>
            <Link href="/documents" className="nav-link">
              –î–æ–∫—É–º–µ–Ω—Ç—ã
            </Link>
            <Link href="/query-logs" className="nav-link">
              –ó–∞–ø—Ä–æ—Å—ã
            </Link>
            <Link href="/feedback" className="nav-link">
              –û—Ç–∑—ã–≤—ã
            </Link>
            <Link href="/users" className="nav-link">
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            </Link>
            <Link href="/notion" className="nav-link active">
              –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã
            </Link>
          </nav>
        </div>
      </header>

      <div className="container">
        <h2 style={{ marginBottom: "20px", fontSize: "24px" }}>
          üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º–∏ ({pages.length})
        </h2>

        {/* Stats */}
        <div className="stats">
          <div className="stat-card">
            <div className="stat-value">{pages.length}</div>
            <div className="stat-label">–í—Å–µ–≥–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{syncedPages}</div>
            <div className="stat-label">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{pendingPages}</div>
            <div className="stat-label">–û–∂–∏–¥–∞—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{errorPages}</div>
            <div className="stat-label">–û—à–∏–±–æ–∫</div>
          </div>
        </div>

        {/* Add Page Form */}
        <div className="card" style={{ marginBottom: "30px" }}>
          <h3 style={{ marginBottom: "15px" }}>–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç</h3>
          <p style={{ color: "#666", marginBottom: "15px", fontSize: "14px" }}>
            –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Notion, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ —Å–∏—Å—Ç–µ–º—É
          </p>
          <AddPageForm />
        </div>

        {/* Pages List */}
        {pages.length === 0 ? (
          <div className="empty-state">
            <h3>–†–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç</h3>
            <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç, –≤—Å—Ç–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Notion</p>
          </div>
        ) : (
          <div className="table">
            <table>
              <thead>
                <tr>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</th>
                  <th>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</th>
                  <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {pages.map((page) => (
                  <PageRow key={page.id} page={page} />
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}

