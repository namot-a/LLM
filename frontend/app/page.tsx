import Link from "next/link";
import { Document, QueryLog, Feedback } from "@/types";
import LogoutButton from "./components/LogoutButton";

const API_URL = process.env.API_URL || process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";

async function getStats() {
  try {
    // Fetch documents
    const docsRes = await fetch(`${API_URL}/api/documents`, { 
      cache: "no-store",
      next: { revalidate: 0 }
    });
    const documents: Document[] = docsRes.ok ? await docsRes.json() : [];

    // Fetch recent query logs
    const logsRes = await fetch(`${API_URL}/api/query-logs?limit=10`, { 
      cache: "no-store",
      next: { revalidate: 0 }
    });
    const queryLogs: QueryLog[] = logsRes.ok ? await logsRes.json() : [];

    // Fetch feedback
    const feedbackRes = await fetch(`${API_URL}/api/feedback?limit=10`, { 
      cache: "no-store",
      next: { revalidate: 0 }
    });
    const feedback: Feedback[] = feedbackRes.ok ? await feedbackRes.json() : [];

    return { documents, queryLogs, feedback };
  } catch (error) {
    console.error("Error fetching stats:", error);
    return { documents: [], queryLogs: [], feedback: [] };
  }
}

export default async function Home() {
  const { documents, queryLogs, feedback } = await getStats();

  // Calculate stats
  const totalDocs = documents.length;
  const totalQueries = queryLogs.length;
  const totalFeedback = feedback.length;
  const goodFeedback = feedback.filter(f => f.rating === "good").length;

  return (
    <div>
      <header className="header">
        <div className="container" style={{ position: "relative" }}>
          <LogoutButton />
          <h1>ü§ñ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Notion TG</h1>
          <nav className="nav">
            <Link href="/" className="nav-link active">
              –ì–ª–∞–≤–Ω–∞—è
            </Link>
            <Link href="/documents" className="nav-link">
              –î–æ–∫—É–º–µ–Ω—Ç—ã
            </Link>
            <Link href="/query-logs" className="nav-link">
              –ó–∞–ø—Ä–æ—Å—ã
            </Link>
            <Link href="/feedback" className="nav-link">
              –û—Ç–∑—ã–≤—ã
            </Link>
            <Link href="/users" className="nav-link">
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            </Link>
            <Link href="/notion" className="nav-link">
              –†–µ–≥–ª–∞–º–µ–Ω—Ç—ã
            </Link>
          </nav>
        </div>
      </header>

      <div className="container">
        {/* Stats */}
        <div className="stats">
          <div className="stat-card">
            <div className="stat-value">{totalDocs}</div>
            <div className="stat-label">–î–æ–∫—É–º–µ–Ω—Ç–æ–≤</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{totalQueries}</div>
            <div className="stat-label">–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{totalFeedback}</div>
            <div className="stat-label">–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">
              {totalFeedback > 0
                ? `${Math.round((goodFeedback / totalFeedback) * 100)}%`
                : "0%"}
            </div>
            <div className="stat-label">–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö</div>
          </div>
        </div>

        {/* Recent Documents */}
        <section>
          <h2 style={{ marginBottom: "20px", fontSize: "24px" }}>
            üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
          </h2>
          {documents.length === 0 ? (
            <div className="empty-state">
              <h3>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
              <p>–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion</p>
            </div>
          ) : (
            <div>
              {documents.slice(0, 5).map((doc) => (
                <div key={doc.id} className="card">
                  <div className="card-title">{doc.title}</div>
                  <div className="card-meta">
                    –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {new Date(doc.last_edited).toLocaleString('ru-RU')}
                  </div>
                  <div className="card-actions">
                    <a
                      href={doc.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="btn btn-primary"
                    >
                      –û—Ç–∫—Ä—ã—Ç—å –≤ Notion
                    </a>
                    <Link
                      href={`/documents/${doc.id}`}
                      className="btn btn-secondary"
                    >
                      –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </Link>
                  </div>
                </div>
              ))}
              {documents.length > 5 && (
                <Link href="/documents" className="btn btn-primary">
                  –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã ({documents.length})
                </Link>
              )}
            </div>
          )}
        </section>

        {/* Recent Queries */}
        <section style={{ marginTop: "40px" }}>
          <h2 style={{ marginBottom: "20px", fontSize: "24px" }}>
            üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
          </h2>
          {queryLogs.length === 0 ? (
            <div className="empty-state">
              <h3>–ó–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
              <p>–ó–∞–ø—Ä–æ—Å—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–Ω—É—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã</p>
            </div>
          ) : (
            <div>
              {queryLogs.slice(0, 5).map((log) => (
                <div key={log.id} className="card">
                  <div className="card-title">{log.question}</div>
                  <div className="card-meta">
                    {new Date(log.ts).toLocaleString('ru-RU')}
                    {log.username && (
                      <> ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {log.username}</>
                    )}
                    {!log.username && log.telegram_user_id && (
                      <> ‚Ä¢ ID: {log.telegram_user_id}</>
                    )}
                    {log.model && <> ‚Ä¢ –ú–æ–¥–µ–ª—å: {log.model}</>}
                  </div>
                  <div className="card-content">
                    {log.answer.substring(0, 200)}
                    {log.answer.length > 200 ? "..." : ""}
                  </div>
                  {log.prompt_tokens && (
                    <div className="card-meta">
                      –¢–æ–∫–µ–Ω—ã: {log.prompt_tokens} + {log.completion_tokens} ={" "}
                      {(log.prompt_tokens || 0) + (log.completion_tokens || 0)}
                      {log.cost_usd && <> ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${Number(log.cost_usd).toFixed(4)}</>}
                      {log.processing_time_ms && (
                        <> ‚Ä¢ –í—Ä–µ–º—è: {log.processing_time_ms}–º—Å</>
                      )}
                    </div>
                  )}
                </div>
              ))}
              {queryLogs.length > 5 && (
                <Link href="/query-logs" className="btn btn-primary">
                  –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã
                </Link>
              )}
            </div>
          )}
        </section>

        {/* Recent Feedback */}
        <section style={{ marginTop: "40px", marginBottom: "40px" }}>
          <h2 style={{ marginBottom: "20px", fontSize: "24px" }}>
            ‚≠ê –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
          </h2>
          {feedback.length === 0 ? (
            <div className="empty-state">
              <h3>–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
              <p>–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
            </div>
          ) : (
            <div>
              {feedback.slice(0, 5).map((fb) => (
                <div key={fb.id} className="card">
                  <div style={{ display: "flex", alignItems: "center", gap: "10px" }}>
                    <span
                      className={
                        fb.rating === "good" ? "badge badge-success" : "badge badge-danger"
                      }
                    >
                      {fb.rating === "good" ? "üëç –•–æ—Ä–æ—à–æ" : "üëé –ü–ª–æ—Ö–æ"}
                    </span>
                    <span className="card-meta">
                      {new Date(fb.ts).toLocaleString('ru-RU')}
                      {fb.username && <> ‚Ä¢ {fb.username}</>}
                      {!fb.username && <> ‚Ä¢ ID: {fb.telegram_user_id}</>}
                    </span>
                  </div>
                  {fb.comment && (
                    <div className="card-content" style={{ marginTop: "10px" }}>
                      {fb.comment}
                    </div>
                  )}
                </div>
              ))}
              {feedback.length > 5 && (
                <Link href="/feedback" className="btn btn-primary">
                  –í—Å–µ –æ—Ç–∑—ã–≤—ã
                </Link>
              )}
            </div>
          )}
        </section>
      </div>
    </div>
  );
}

