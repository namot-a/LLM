import Link from "next/link";
import { Feedback } from "@/types";
import DeleteButton from "./DeleteButton";

const API_URL = process.env.API_URL || process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";

async function getFeedback() {
  try {
    const res = await fetch(`${API_URL}/api/feedback`, {
      cache: "no-store",
      next: { revalidate: 0 },
    });

    if (!res.ok) {
      throw new Error("Failed to fetch feedback");
    }

    return await res.json();
  } catch (error) {
    console.error("Error fetching feedback:", error);
    return [];
  }
}

export default async function FeedbackPage() {
  const feedback: Feedback[] = await getFeedback();

  const goodFeedback = feedback.filter((f) => f.rating === "good").length;
  const badFeedback = feedback.filter((f) => f.rating === "bad").length;
  const satisfactionRate =
    feedback.length > 0
      ? Math.round((goodFeedback / feedback.length) * 100)
      : 0;

  return (
    <div>
      <header className="header">
        <div className="container">
          <h1>ü§ñ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Notion TG</h1>
          <nav className="nav">
            <Link href="/" className="nav-link">
              –ì–ª–∞–≤–Ω–∞—è
            </Link>
            <Link href="/documents" className="nav-link">
              –î–æ–∫—É–º–µ–Ω—Ç—ã
            </Link>
            <Link href="/query-logs" className="nav-link">
              –ó–∞–ø—Ä–æ—Å—ã
            </Link>
            <Link href="/feedback" className="nav-link active">
              –û—Ç–∑—ã–≤—ã
            </Link>
          </nav>
        </div>
      </header>

      <div className="container">
        <h2 style={{ marginBottom: "20px", fontSize: "24px" }}>
          ‚≠ê –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({feedback.length})
        </h2>

        {/* Stats */}
        <div className="stats">
          <div className="stat-card">
            <div className="stat-value">{feedback.length}</div>
            <div className="stat-label">–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{goodFeedback}</div>
            <div className="stat-label">üëç –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{badFeedback}</div>
            <div className="stat-label">üëé –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{satisfactionRate}%</div>
            <div className="stat-label">–£—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏</div>
          </div>
        </div>

        {feedback.length === 0 ? (
          <div className="empty-state">
            <h3>–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
            <p>–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
          </div>
        ) : (
          <div>
            {feedback.map((fb) => (
              <div key={fb.id} className="card">
                <div
                  style={{
                    display: "flex",
                    alignItems: "center",
                    gap: "10px",
                    marginBottom: "10px",
                  }}
                >
                  <span
                    className={
                      fb.rating === "good"
                        ? "badge badge-success"
                        : "badge badge-danger"
                    }
                  >
                    {fb.rating === "good" ? "üëç –•–æ—Ä–æ—à–æ" : "üëé –ü–ª–æ—Ö–æ"}
                  </span>
                  <span className="card-meta">
                    <strong>ID:</strong> {fb.id}
                  </span>
                </div>
                <div className="card-meta">
                  <strong>–í—Ä–µ–º—è:</strong> {new Date(fb.ts).toLocaleString('ru-RU')}
                  <br />
                  <strong>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> {fb.telegram_user_id}
                  <br />
                  {fb.message_id && (
                    <>
                      <strong>ID —Å–æ–æ–±—â–µ–Ω–∏—è:</strong> {fb.message_id}
                      <br />
                    </>
                  )}
                  {fb.query_log_id && (
                    <>
                      <strong>ID –∑–∞–ø—Ä–æ—Å–∞:</strong> {fb.query_log_id}
                      <br />
                    </>
                  )}
                </div>
                {fb.comment && (
                  <div className="card-content">
                    <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong>
                    <br />
                    {fb.comment}
                  </div>
                )}
                <div className="card-actions">
                  <DeleteButton feedbackId={fb.id} />
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
