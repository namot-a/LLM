import Link from "next/link";
import { TelegramUser } from "@/types";
import AddUserForm from "./AddUserForm";
import UserRow from "./UserRow";

const API_URL = process.env.API_URL || process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";

async function getTelegramUsers() {
  try {
    const res = await fetch(`${API_URL}/api/telegram-users`, {
      cache: "no-store",
      next: { revalidate: 0 },
    });

    if (!res.ok) {
      throw new Error("Failed to fetch telegram users");
    }

    return await res.json();
  } catch (error) {
    console.error("Error fetching telegram users:", error);
    return [];
  }
}

export default async function UsersPage() {
  const users: TelegramUser[] = await getTelegramUsers();

  const activeUsers = users.filter((u) => u.is_active).length;
  const headUsers = users.filter((u) => u.role === "Head").length;

  return (
    <div>
      <header className="header">
        <div className="container" style={{ position: "relative" }}>
          <h1>ü§ñ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Notion TG</h1>
          <nav className="nav">
            <Link href="/" className="nav-link">
              –ì–ª–∞–≤–Ω–∞—è
            </Link>
            <Link href="/documents" className="nav-link">
              –î–æ–∫—É–º–µ–Ω—Ç—ã
            </Link>
            <Link href="/query-logs" className="nav-link">
              –ó–∞–ø—Ä–æ—Å—ã
            </Link>
            <Link href="/feedback" className="nav-link">
              –û—Ç–∑—ã–≤—ã
            </Link>
            <Link href="/users" className="nav-link active">
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            </Link>
          </nav>
        </div>
      </header>

      <div className="container">
        <h2 style={{ marginBottom: "20px", fontSize: "24px" }}>
          üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ({users.length})
        </h2>

        {/* Stats */}
        <div className="stats">
          <div className="stat-card">
            <div className="stat-value">{users.length}</div>
            <div className="stat-label">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{activeUsers}</div>
            <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
          </div>
          <div className="stat-card">
            <div className="stat-value">{headUsers}</div>
            <div className="stat-label">Head</div>
          </div>
        </div>

        {/* Add User Form */}
        <div className="card" style={{ marginBottom: "30px" }}>
          <h3 style={{ marginBottom: "20px" }}>–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
          <AddUserForm />
        </div>

        {/* Users List */}
        {users.length === 0 ? (
          <div className="empty-state">
            <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç</h3>
            <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞</p>
          </div>
        ) : (
          <div className="table">
            <table>
              <thead>
                <tr>
                  <th>User ID</th>
                  <th>Username</th>
                  <th>–†–æ–ª—å</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</th>
                  <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {users.map((user) => (
                  <UserRow key={user.user_id} user={user} />
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}

